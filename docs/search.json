[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"sample book written Markdown. can use anything Pandoc’s Markdown supports; example, math equation \\(^2 + b^2 = c^2\\).","code":""},{"path":"index.html","id":"usage","chapter":"1 About","heading":"1.1 Usage","text":"bookdown chapter .Rmd file, .Rmd file can contain one (one) chapter. chapter must start first-level heading: # good chapter, can contain one (one) first-level heading.Use second-level higher headings within chapters like: ## short section ### even shorter section.index.Rmd file required, also first book chapter. homepage render book.","code":""},{"path":"cbm_defaults.html","id":"cbm_defaults","chapter":"2 CBM_defaults","heading":"2 CBM_defaults","text":"","code":""},{"path":"cbm_defaults.html","id":"overview","chapter":"2 CBM_defaults","heading":"2.1 Overview","text":"primary role CBM_defaults module read various tables SQLite database file. includes default disturbance data different disturbance types IDs, spinup parameters, pool names, . outputs module primarily used CBM_dataPrep_x CBM_core.","code":""},{"path":"cbm_defaults.html","id":"list-of-input-objects","chapter":"2 CBM_defaults","heading":"2.2 List of input objects","text":"","code":""},{"path":"cbm_defaults.html","id":"list-of-output-objects","chapter":"2 CBM_defaults","heading":"2.3 List of output objects","text":"","code":""},{"path":"cbm_defaults.html","id":"module-flow","chapter":"2 CBM_defaults","heading":"2.4 Module flow","text":"SQLite database file downloaded stored user’s Inputs folder GitHub using prepInputs.Create connection database dbConnect. creates archiveIndex object.Using dbGetQuery, 3 disturbance tables extracted archiveIndex. tables named matrices2, matrices3, matrices6. merged create disturbanceMatrix object.spatialUnitsID spinupParameters extracted archiveIndex merged create spinupSQL object.pooldef extracted, transformed Character class object.poolCount created defining length pooldef.forestTypeID extracted archiveIndex is_sw column created entry forest_type_id = 1 TRUE everything else FALSE.","code":""},{"path":"cbm_defaults.html","id":"usage-1","chapter":"2 CBM_defaults","heading":"2.5 Usage","text":"module can run independently running global script . main task read-default values SpaDES-CBM akin ArchiveIndex CBM-CFS3 runs.","code":"\nprojectPath <- \"~/CBM_defaults\"\nrepos <- c(\"predictiveecology.r-universe.dev\", getOption(\"repos\"))\nif ((packageVersion(\"SpaDES.project\") < \"0.1.1\" || packageVersion(\"Require\") < \"1.0.1.9002\") |>\n    tryCatch(error = function(x) TRUE))\n  install.packages(c(\"SpaDES.project\", \"Require\"), repos = repos)\n\nout <- SpaDES.project::setupProject(\n  paths = list(projectPath = projectPath),\n  \n  options = options(\n    repos = c(repos = repos),\n    reproducible.destinationPath = \"inputs\"\n  ),\n  modules =  c(\"PredictiveEcology/CBM_defaults@training\"),\n  require = c(\"SpaDES.core\"),\n)\n\noutDefaults <- SpaDES.core::simInitAndSpades2(out)"},{"path":"cbm_dataprep_sk.html","id":"cbm_dataprep_sk","chapter":"3 CBM_dataPrep_SK","heading":"3 CBM_dataPrep_SK","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"overview-1","chapter":"3 CBM_dataPrep_SK","heading":"3.1 Overview","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"list-of-input-objects-1","chapter":"3 CBM_dataPrep_SK","heading":"3.2 List of input objects","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"list-of-output-objects-1","chapter":"3 CBM_dataPrep_SK","heading":"3.3 List of output objects","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"module-flow-rename-this-section-later","chapter":"3 CBM_dataPrep_SK","heading":"3.4 Module flow (rename this section later)","text":"#OLD VERSION","code":""},{"path":"cbm_dataprep_sk.html","id":"overview-2","chapter":"3 CBM_dataPrep_SK","heading":"3.5 Overview","text":"module read-user-provided information provide defaults.\nreads-rasters (ageRaster, ecoRaster, gcIndexRaster, spuRaster, masterRaster) either defaults provided user.\nrasters, pixelGroup created unique combinations rasters values.\npixelGroup main processing unit SpaDES CBM simulations.\nfirst step, spatialDT data.table listing pixels respective values raster, pixelIndex pixelGroup created (sim$spatialDT).\nspatialDT, reduced data.table create (sim$level3DT) data.table processing start CBM_core.\nnumber records data.table (sim$level3DT) equal number pixel groups processed spinup event CBM_core module.\npresent module also creates variables length rows level3DT use events CBM_core module.\n: returnIntervals, maxRotations, minRotations, lastPassDMIDs, historicDMIDs, delays stored simList.Another important object created module mySpuDmids.\ndata.table links user-defined disturbances ($userDist) spatial unit disturbance matrix.\nused apply disturbances pixel groups annual event CBM_core module.\nmySpuDmids object created starting user provided list disturbances (userDist) matches rasterId disturbance raster disturbance name, speficies disturbance stand-replacing (userDist$wholeStand == 1) (userDist$wholeStand == 1).\ndisturbance names (userDist$distName) location disturbance (linked via rasterID sim$mySpuDmids$spatial_unit id) used associate disturbance matrix identification number disturbed pixelGroup.\nDisturbance Matrices (DM) determine proportion carbon pool gets transferred another carbon pool via disturbance.\n426 matrix IDs present default data (sim$processes$disturbanceMatrices).\nDMIDs (Disturbance Matrix IDs) part default data CBM-CFS3.\nDMs specific spatial units numbering (48 sim$cbmData@spatialUnitIds) overlay administrative boundaries ecozones Canada.\nSpatial units central units CBM-CFS3, ecozones determining various ecological parameters used simulations via CBM_core module.\nproportion carbon transferred specific DMID can found sim$cbmData@disturbanceMatrixValues.\nseries R-functions built help users associate correct disturbance matrices (spuDist(), mySpu(), seeDist(), simDist()) searchable package.Note: * CBM_defaults objects recreated .inputObject module * nothing carbon carbon increments point.\nmodule feeds CBM_core module CBM_vol2biomass.R module.","code":""},{"path":"cbm_dataprep_sk.html","id":"usage-2","chapter":"3 CBM_dataPrep_SK","heading":"3.6 Usage","text":"","code":"library(igraph)\nlibrary(SpaDES.core)\n\nmoduleDir <- getwd()\ninputDir <- file.path(moduleDir, \"inputs\") %>%\n    reproducible::checkPath(create = TRUE)\noutputDir <- file.path(moduleDir, \"outputs\")\ncacheDir <- file.path(outputDir, \"cache\")\ntimes <- list(start = 0, end = 10)\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) parameters\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) <-\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) list(#CBM_dataPrep\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) list(.useCache\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) '.inputObjects')\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) .progress\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) list(type\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) 'text',\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) interval\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) 1),\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) #\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) for\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) a\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) progress\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) bar\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) If\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) there\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) are\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) further\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) modules,\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) each\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) can\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) have\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) its\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) own\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) set\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) of\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) parameters:\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) module1\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) list(param1\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) value1,\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) param2\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) value2),\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) module2\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) list(param1\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) value1,\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) param2\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) =\nparameters <- list(#CBM_dataPrep = list(.useCache = '.inputObjects') .progress = list(type = 'text', interval = 1), # for a progress bar  If there are further modules, each can have its own set of parameters: module1 = list(param1 = value1, param2 = value2), module2 = list(param1 = value1, param2 = value2)) value2))\nmodules <- list(\"CBM_dataPrep_SK\")\nobjects <- list(userDistFile = file.path(moduleDir, \"CBM_dataPrep_SK\",\n    \"data\", \"userDist.csv\"))\npaths <- list(cachePath = cacheDir, modulePath = moduleDir, inputPath = inputDir,\n    outputPath = outputDir)\n\nmyInputs <- simInit(times = times, params = parameters, modules = modules,\n    objects = objects, paths = paths)\n\noutInputs <- spades(myInputs)"},{"path":"cbm_dataprep_sk.html","id":"events","chapter":"3 CBM_dataPrep_SK","heading":"3.7 Events","text":"event (init) module.","code":""},{"path":"cbm_dataprep_sk.html","id":"data-dependencies","chapter":"3 CBM_dataPrep_SK","heading":"3.8 Data dependencies","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"module-parameters","chapter":"3 CBM_dataPrep_SK","heading":"3.8.1 Module parameters","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"input-data","chapter":"3 CBM_dataPrep_SK","heading":"3.8.2 Input data","text":"example user-provided rasters .csv files provided default.\nexample simulates region managed forests SK.\nrasters data frames example cloud-drive (userDefaultData_CBM_SK).\nUnless using example, user provide:raster study area desired resolution simulation (sim$masterRaster)age raster (sim$ageRaster)raster indicating growth curve applied pixels (sim$gcIndexRaster) URL raster (sim$gcIndexRasterURL).raster disturbances year user wants disturbances simulated. information come SpaDES modules (fireSence, fire modules, insects modules, etc.). retrospective simulation (past present), rasters found can used anywhere Canada https://opendata.nfis.org/downloads/forest_change/CA_forest_harvest_mask_year_1985_2015.zip..csv file growth curve study area (links sim$gcIndexRaster), sim$userGcM3.csv location file (sim$userGcM3File). sim$userGcM3.csv file required three columns:\n“GrowthCurveComponentID”, link raster sim$gcIndexRaster,\n“Age” ranging 0 maximum age growth curve, \n“MerchVolume” cumulative value m3/ha age along growth curve.\n“GrowthCurveComponentID”, link raster sim$gcIndexRaster,“Age” ranging 0 maximum age growth curve, “MerchVolume” cumulative value m3/ha age along growth curve.file disturbances applied well raster values (sim$userDist) location (sim$userDistFile). userDist.csv file must three columns:\n“distName” representing simple description disturbance type (e.g., fire, clearcut, deforestation, etc.).\n“rasterId” indications value specific disturbance disturbance raster.\n“wholeStand” indicating disturbance stand-replacing disturbance (1) partial disturbance (0).\n“distName” representing simple description disturbance type (e.g., fire, clearcut, deforestation, etc.).“rasterId” indications value specific disturbance disturbance raster.“wholeStand” indicating disturbance stand-replacing disturbance (1) partial disturbance (0).user provide: * raster ecozones study area (sim$ecoRaster), script calculate raster based sim$masterRaster provided.\n* raster spatial units (sim$spuRaster) script calculate raster based sim$masterRaster provided.","code":""},{"path":"cbm_dataprep_sk.html","id":"output-data","chapter":"3 CBM_dataPrep_SK","heading":"3.8.3 Output data","text":"","code":""},{"path":"cbm_dataprep_sk.html","id":"links-to-other-modules","chapter":"3 CBM_dataPrep_SK","heading":"3.9 Links to other modules","text":"CBM_coreCBM_defaultsCBM_vol2biomass","code":""},{"path":"cbm_vol2biomass.html","id":"cbm_vol2biomass","chapter":"4 CBM_vol2biomass","heading":"4 CBM_vol2biomass","text":"","code":""},{"path":"cbm_vol2biomass.html","id":"overview-3","chapter":"4 CBM_vol2biomass","heading":"4.1 Overview","text":"","code":""},{"path":"cbm_vol2biomass.html","id":"list-of-input-objects-2","chapter":"4 CBM_vol2biomass","heading":"4.2 List of input objects","text":"","code":""},{"path":"cbm_vol2biomass.html","id":"list-of-output-objects-2","chapter":"4 CBM_vol2biomass","heading":"4.3 List of output objects","text":"","code":""},{"path":"cbm_vol2biomass.html","id":"module-flow-rename-this-section-later-1","chapter":"4 CBM_vol2biomass","heading":"4.4 Module flow (rename this section later)","text":"","code":""},{"path":"cbm_vol2biomass.html","id":"old-version","chapter":"4 CBM_vol2biomass","heading":"4.5 OLD VERSION","text":"","code":""},{"path":"cbm_vol2biomass-1.html","id":"cbm_vol2biomass-1","chapter":"5 CBM_vol2biomass","heading":"5 CBM_vol2biomass","text":"","code":""},{"path":"cbm_vol2biomass-1.html","id":"overview-4","chapter":"5 CBM_vol2biomass","heading":"5.1 Overview","text":"module translates m3/ha values biomass/ha increments spadesCBMcore needs simulate annual carbon fluxes estimate stocks spadesCBMcore.R module spadesCBM.\nimplementation Boudewyn et al 2007 stand-level translation.\nLike many statistical models, translation always successful.\nscripts line translation procedure CBM-CFS3 addition smoothing methods using Generalized Additive Models (GAMs).\nmodule provides two examples smoothing methods: one applied cumulative carbon/ha curves (merch, foliage, growth curves provided), one applied increment curves (differences betwee years cumulative curves).\nresponsibility user decide curves smoothing methods appropriate. module can run independently spadesCBM deck SpaDES modules.","code":""},{"path":"cbm_vol2biomass-1.html","id":"user-input","chapter":"5 CBM_vol2biomass","heading":"5.1.1 User input","text":"user must provide two files growth information one location file.\nNote can provided spadesCBMinputs module spadesCBM deck used: * one metadata file (userGcMeta) minimum identifier links specific growth curve pixel study area raster (gcId - growth curve identification number) leading species curve.\n* one file gives m3 per ha age identified growth curves.\n* location information file.\ninformation preferably passed along raster spadesCBMinputs module, can -passed providing vector ecozones spatial units growth curves apply .\ninformation used identify jurisdiction (province territory) ecozone gcId , turn used determine appropriate parameters stand-level conversion m3/ha biomass per ha Boudewyn et al. approach.","code":""},{"path":"cbm_vol2biomass-1.html","id":"default-files-provided","chapter":"5 CBM_vol2biomass","heading":"5.1.2 Default files provided","text":"Two types information built module: Boudewyn et al. parameters tables, data frames help link CBM-specific information parameter categories.\n* URLs Boudewyn et al. five parameter tables built module (see .inputObjects) loaded NFIS site directly.\n* cbmAdmin data frame links CBM-specific spatial units administrative boundaries Canada ecozones.\n* canfi_species data frame provides canfi_species numbers genus abbreviations used identify correct parameters Boudewyn et al tables.\nalso specifies name tree species forest_type_id, identifier used CBM.","code":""},{"path":"cbm_vol2biomass-1.html","id":"pseudocode-the-general-steps","chapter":"5 CBM_vol2biomass","heading":"5.1.3 Pseudocode: the general steps","text":"module reads user userGcMeta, reads userGcM3.\nprovides plot curves userGcM3 visual inspection (sim$volCurves).\nmatches jurisdiction gcId (growth curve identification), matches leading species attaching canfi_species (number) genus leading species.\ncanfi_species genus key associating correct parameters conversion (Boudewyn et al. 2007).\nspecies matches complete, series functions (see package CBMutils) used go provided cumulative m3/ha curve cumulative tonnes carbon/ha ground live biomass pool (merch, foliage, ).\nvisual check provided via sim$plotsRawCumulativeBiomass.\nSince time models need smoothing, two examples smoothing, applied Saskatchewan default example, provided fitting GAMs 1) cumulative curve (per gcId) three pool, 2) fitting GAMs increments years three pools.\nCurrently, example 1) commented , example 2) used show sometimes, even perfect-looking curves need hard fixes.\nexamplee, default knots GAMs set 20 (k=20) extra weight given 0 intercept maximum value curve setting weights (wts script).\nSee http://environmentalcomputing.net/intro--gams/ guide GAMs.\n, user’s responsibility decided smoothing parameters /methods appropriate.\ndefault example 1) (commented ), fitted values GAMs cumulative curves carbon/ha used calculate annual increment, dived two use spadesCBMcore.R module annual processing (half growth processes two instances).\nHalved increments can visually assessed using sim$checkInc halved increments save simList (sim$growth_increments).\nexample 2), currently executed default Saskatchewan example, increments calculated prior fitting GAMs.\nfinal step (examples), halved growth increment table hashed processing speed (sim$gcHash).\nmodule uses example region Saskatchewan default simulation can modified run independently (.e., just translation m3 ground carbon three pools).","code":""},{"path":"cbm_vol2biomass-1.html","id":"units","chapter":"5 CBM_vol2biomass","heading":"5.1.4 Units","text":"user provides growth curves cumulative m3/ha time one leading species (following CBM-CFS3).\ncurves fed Boudewyn algorithms (CBM_vol2biomass module) results multiplied 0.5 give carbon/ha.\ndeck modules simulates annual basis preferable cumulative curves m3/ha provided individual years.\nper individual years, GAM fitted values modified provide yearly fitted.values.\nobject cumPoolsRaw (line 411) CBM_vol2biomass.R, cumulative values three -ground live pools tonnes carbon/ha.\nfollowing values tonnes c/ha.","code":""},{"path":"cbm_vol2biomass-1.html","id":"output","chapter":"5 CBM_vol2biomass","heading":"5.1.5 Output","text":"module provides sim$growth_increments hashed version, sim$gcHash available spadesCBMcore module.\noutput created module visual checks growth curve processing.","code":""},{"path":"cbm_vol2biomass-1.html","id":"spades","chapter":"5 CBM_vol2biomass","heading":"5.1.6 SpaDES","text":"one event module (init), module scheduled .\nmodule designed part SpaDES-deck spadesCBM, SpaDES modules representing CBM-CFS3, transparent spatialized.\nfour modules family: spadesCBMdefaults, spadesSBMinputs, CBM_vol2biomass, spadesCBMcore.","code":""},{"path":"cbm_vol2biomass-1.html","id":"list-of-potential-improvements","chapter":"5 CBM_vol2biomass","heading":"5.1.7 list of potential improvements","text":"add check see growth curves provided annual basis , modify GAM outputs provided annual fitted value.make k (knots GAMs) user defined parameterprovide option fit GAM prior maximum value curve (0 max) number knots (k) one maximum value possibly knots.previous weights going GAMs.","code":""},{"path":"cbm_vol2biomass-1.html","id":"usage-3","chapter":"5 CBM_vol2biomass","heading":"5.2 Usage","text":"","code":"\nlibrary(SpaDES)\nlibrary(magrittr) # this is needed to use \"%>%\" below\nmoduleDir <- \"C:/Celine/github/spadesCBM\"\ninputDir <- file.path(moduleDir, \"inputs\") %>% reproducible::checkPath(create = TRUE)\noutputDir <- file.path(moduleDir, \"outputs\")\ncacheDir <- file.path(outputDir, \"cache\")\ntimes <- list(start = 0, end = 10)\n\nparameters <- list(\n  CBM_vol2biomass = list(.useCache = \".inputObjects\")\n  #.progress = list(type = \"text\", interval = 1), # for a progress bar\n  ## If there are further modules, each can have its own set of parameters:\n  #module1 = list(param1 = value1, param2 = value2),\n  #module2 = list(param1 = value1, param2 = value2)\n)\n\nmodules <- list(\"CBM_vol2biomass\")\nobjects <- list(\n  #userGcMetafileName <- c(\"/RIA2019/gcMetaRuns.csv\"),\n  #userGcM3 <- c(\"/RIA2019/gcRIAm3.csv\")\n\n)\npaths <- list(\n  cachePath = cacheDir,\n  modulePath = moduleDir,\n  inputPath = inputDir,\n  outputPath = outputDir\n)\noptions(\n    rasterTmpDir = inputDir,\n    reproducible.cachePath = cacheDir,\n    spades.inputPath = inputDir,\n    spades.outputPath = outputDir,\n    spades.modulePath = moduleDir\n  )\n\nmyBiomass <- simInit(times = times, params = parameters, modules = modules,\n                 objects = objects)\n\nmyBiomassOut <- spades(myBiomass)"},{"path":"cbm_core.html","id":"cbm_core","chapter":"6 CBM_core","heading":"6 CBM_core","text":"","code":""},{"path":"cbm_core.html","id":"overview-5","chapter":"6 CBM_core","heading":"6.1 Overview","text":"core modules Spades CBM.","code":""},{"path":"cbm_core.html","id":"notes-on-forest-type","chapter":"6 CBM_core","heading":"6.1.1 Notes on forest type","text":"SQligth (used CBM_defaults) column named forest_type_id identifies softwood forest (sw) 1, mixed forest 2, hardwood forest (hw) 3. distinction important determines root biomass calculated (sw differently hw). definition fotrest_type_id constant used canfi_species.csv (species level identification codes needed volumne biomass translation CBM_vol2biomass), gcMeta.csv (SK specific growth curve metadata), sim$growth_increments built gcMeta canfi_species. sim$growth_increment$forest_type_id one used create sw flag needed input spinup event. , sw_hw flag (1=sw, 0=hw) stored sim$cbm_vars$state$sw_hw column.","code":""},{"path":"cbm_core.html","id":"list-of-input-objects-3","chapter":"6 CBM_core","heading":"6.2 List of input objects","text":"","code":""},{"path":"cbm_core.html","id":"list-of-output-objects-3","chapter":"6 CBM_core","heading":"6.3 List of output objects","text":"","code":""},{"path":"cbm_core.html","id":"module-flow-rename-this-section-later-2","chapter":"6 CBM_core","heading":"6.4 Module flow (rename this section later)","text":"","code":""},{"path":"cbm_core.html","id":"old-version-1","chapter":"6 CBM_core","heading":"6.5 OLD VERSION","text":"","code":""},{"path":"cbm_core.html","id":"overview-6","chapter":"6 CBM_core","heading":"6.6 Overview","text":"NPP: Net primary productivity ground productivity. Provide overview module / use module.","code":""}]
