if (!"rmarkdown" %in% installed.packages() ||
packageVersion("rmarkdown") < "2.17") {
install.packages("rmarkdown", dependencies = TRUE)
}
if (!"knitr" %in% installed.packages() ||
packageVersion("knitr") < "1.40.4") {
remotes::install_github("yihui/knitr", dependencies = TRUE)
}
if (!"bookdown" %in% installed.packages() ||
packageVersion("bookdown") < "0.29") {
install.packages("bookdown", dependencies = TRUE)
}
if (!"htmlwidgets" %in% installed.packages() ||
packageVersion("htmlwidgets") < "1.5.4") {
install.packages("htmlwidgets", dependencies = TRUE)
}
if (!"tinytex" %in% installed.packages() ||
packageVersion("tinytex") < "0.41") {
## version "0.41" is probably not mandatory, but it's the version used as of Oct 27 2022
tinytex::install_tinytex()
}
pkgPath <- normalizePath(file.path("packages", version$platform,
paste0(version$major, ".", strsplit(version$minor, "[.]")[[1]][1])),
winslash = "/")
dir.create(pkgPath, recursive = TRUE)
.libPaths(pkgPath, include.site = FALSE)
if (!"remotes" %in% installed.packages(lib.loc = pkgPath))
install.packages("remotes")
if (!"Require" %in% installed.packages(lib.loc = pkgPath) ||
packageVersion("Require", lib.loc = pkgPath) < "0.1.6.9015") {
remotes::install_github("PredictiveEcology/Require@bfb3ed19231d38362e7324f10435a387e29b6ce1",
upgrade = FALSE, force = TRUE)
}
install.packages('bookdown')
install.packages("bookdown")
#RENDERING
#this is currently rendering as an .Rmd and not html, not creating a docs folder.
render_book(output_format = "all", envir = new.env())
library(bookdown)
#RENDERING
#this is currently rendering as an .Rmd and not html, not creating a docs folder.
render_book(output_format = "all", envir = new.env())
if (!"rmarkdown" %in% installed.packages() ||
packageVersion("rmarkdown") < "2.17") {
install.packages("rmarkdown", dependencies = TRUE)
}
if (!"knitr" %in% installed.packages() ||
packageVersion("knitr") < "1.40.4") {
remotes::install_github("yihui/knitr", dependencies = TRUE)
}
if (!"bookdown" %in% installed.packages() ||
packageVersion("bookdown") < "0.29") {
install.packages("bookdown", dependencies = TRUE)
}
if (!"htmlwidgets" %in% installed.packages() ||
packageVersion("htmlwidgets") < "1.5.4") {
install.packages("htmlwidgets", dependencies = TRUE)
}
if (!"tinytex" %in% installed.packages() ||
packageVersion("tinytex") < "0.41") {
## version "0.41" is probably not mandatory, but it's the version used as of Oct 27 2022
tinytex::install_tinytex()
}
pkgPath <- normalizePath(file.path("packages", version$platform,
paste0(version$major, ".", strsplit(version$minor, "[.]")[[1]][1])),
winslash = "/")
dir.create(pkgPath, recursive = TRUE)
.libPaths(pkgPath, include.site = FALSE)
if (!"remotes" %in% installed.packages(lib.loc = pkgPath))
install.packages("remotes")
if (!"Require" %in% installed.packages(lib.loc = pkgPath) ||
packageVersion("Require", lib.loc = pkgPath) < "0.1.6.9015") {
remotes::install_github("PredictiveEcology/Require@bfb3ed19231d38362e7324f10435a387e29b6ce1",
upgrade = FALSE, force = TRUE)
}
install.packages('bookdown')
install.packages('fansi')
install.packages('vctrs')
library(bookdown)
library(fansi)
library(vctrs)
install.packages("bookdown")
Sys.setenv(LANDR_MAN_VERSION = "0.1") ## update this for each new release
#RENDERING
render_book(output_format = "all", envir = new.env())
1
if (!"rmarkdown" %in% installed.packages() ||
packageVersion("rmarkdown") < "2.17") {
install.packages("rmarkdown", dependencies = TRUE)
}
if (!"knitr" %in% installed.packages() ||
packageVersion("knitr") < "1.40.4") {
remotes::install_github("yihui/knitr", dependencies = TRUE)
}
if (!"bookdown" %in% installed.packages() ||
packageVersion("bookdown") < "0.29") {
install.packages("bookdown", dependencies = TRUE)
}
if (!"htmlwidgets" %in% installed.packages() ||
packageVersion("htmlwidgets") < "1.5.4") {
install.packages("htmlwidgets", dependencies = TRUE)
}
if (!"tinytex" %in% installed.packages() ||
packageVersion("tinytex") < "0.41") {
## version "0.41" is probably not mandatory, but it's the version used as of Oct 27 2022
tinytex::install_tinytex()
}
pkgPath <- normalizePath(file.path("packages", version$platform,
paste0(version$major, ".", strsplit(version$minor, "[.]")[[1]][1])),
winslash = "/")
dir.create(pkgPath, recursive = TRUE)
.libPaths(pkgPath, include.site = FALSE)
if (!"remotes" %in% installed.packages(lib.loc = pkgPath))
install.packages("remotes")
if (!"Require" %in% installed.packages(lib.loc = pkgPath) ||
packageVersion("Require", lib.loc = pkgPath) < "0.1.6.9015") {
remotes::install_github("PredictiveEcology/Require@bfb3ed19231d38362e7324f10435a387e29b6ce1",
upgrade = FALSE, force = TRUE)
}
install.packages('bookdown')
install.packages('fansi')
install.packages('vctrs')
library(bookdown)
library(fansi)
library(vctrs)
install.packages("bookdown")
install.packages("bookdown")
install.packages('fansi')
install.packages("fansi")
install.packages('vctrs')
install.packages("vctrs")
library(bookdown)
library(fansi)
library(vctrs)
Sys.setenv(LANDR_MAN_VERSION = "0.1") ## update this for each new release
#RENDERING
render_book(output_format = "all", envir = new.env())
prjDir <- SpaDES.project::findProjectPath()
docsDir <- file.path(prjDir, "_bookdown.yml") |>
yaml::read_yaml() |>
purrr::pluck("output_dir") |>
fs::path_abs()
install.packages("yaml")
docsDir <- file.path(prjDir, "_bookdown.yml") |>
yaml::read_yaml() |>
purrr::pluck("output_dir") |>
fs::path_abs()
options(
Ncpus = min(parallel::detectCores() / 2, 8)
)
library(bibtex)
install.packages("bibtex")
install.packages("bookdown")
install.packages("knitr")
install.packages("RefManageR")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("PredictiveEcology/SpaDES.docs@development")
library(bibtex)
library(bookdown)
library(data.table)
library(knitr)
library(RefManageR)
library(SpaDES.docs)
## automatically create a bib database for R packages
allPkgs <- .packages(all.available = TRUE, lib.loc = .libPaths()[1])
keyPkgs <- c(
"bookdown", "knitr", "LandR", "LandWebUtils",
"reproducible", "rmarkdown", "shiny", "SpaDES.core", "SpaDES.tools"
)
write_bib(allPkgs, file.path(bibDir, "packages.bib")) ## TODO: using allPkgs, not all pkgs have dates/years
bibDir <- Require::checkPath(file.path(prjDir, "citations"), create = TRUE)
## collapse all chapter .bib files into one ------
bibFiles <- c(
list.files(file.path(prjDir, "m"), "references_", recursive = TRUE, full.names = TRUE),
file.path(bibDir, "packages.bib"),
file.path(bibDir, "references.bib")
)
bibdata <- lapply(bibFiles, function(f) {
if (file.exists(f)) RefManageR::ReadBib(f)
})
bibdata <- Reduce(merge, bibdata)
WriteBib(bibdata, file = file.path(bibDir, "references.bib"))
View(bibdata)
write_bib(allPkgs, file.path(bibDir, "packages.bib")) ## TODO: using allPkgs, not all pkgs have dates/years
setwd(normalizePath(prjDir))
## prevents GitHub from rendering book using Jekyll
if (!file.exists(file.path(prjDir, ".nojekyll"))) {
file.create(file.path(prjDir, ".nojekyll"))
}
## set manual version
Sys.setenv(SpadesCBM_MAN_VERSION = "0.1") ## version
Sys.getenv("SpadesCBM_MAN_VERSION")
## don't use Require for package installation etc.
Sys.setenv(R_USE_REQUIRE = "false")
Sys.getenv("R_USE_REQUIRE")
## NOTE: need dot because knitting is doing `rm(list = ls())`
.copyModuleRmds <- prepManualRmds("modules", rebuildCache = FALSE) ## use rel path!
## NOTE: need dot because knitting is doing `rm(list = ls())`
.copyModuleRmds <- prepManualRmds("modules", rebuildCache = FALSE) ## use rel path!
## render the book using new env -- see <https://stackoverflow.com/a/46083308>
bookdown::render_book(output_format = "all", envir = new.env())
## render the book using new env -- see <https://stackoverflow.com/a/46083308>
bookdown::render_book(output_format = "all", envir = new.env())
install.packages("formatR")
## render the book using new env -- see <https://stackoverflow.com/a/46083308>
bookdown::render_book(output_format = "all", envir = new.env())
## remove temporary .Rmds
file.remove(.copyModuleRmds)
setwd(prjDir)
prjDir <- SpaDES.project::findProjectPath()
docsDir <- file.path(prjDir, "_bookdown.yml") |>
yaml::read_yaml() |>
purrr::pluck("output_dir") |>
fs::path_abs()
options(
Ncpus = min(parallel::detectCores() / 2, 8)
)
library(bibtex)
library(bookdown)
library(data.table)
library(knitr)
library(RefManageR)
library(SpaDES.docs)
library(formatR)
install.packages("formatR")
library(formatR)
setwd(normalizePath(prjDir))
## prevents GitHub from rendering book using Jekyll
if (!file.exists(file.path(prjDir, ".nojekyll"))) {
file.create(file.path(prjDir, ".nojekyll"))
}
## set manual version
Sys.setenv(SpadesCBM_MAN_VERSION = "0.1") ## version
Sys.getenv("SpadesCBM_MAN_VERSION")
## don't use Require for package installation etc.
Sys.setenv(R_USE_REQUIRE = "false")
Sys.getenv("R_USE_REQUIRE")
## NOTE: need dot because knitting is doing `rm(list = ls())`
.copyModuleRmds <- prepManualRmds("modules", rebuildCache = FALSE) ## use rel path!
## render the book using new env -- see <https://stackoverflow.com/a/46083308>
bookdown::render_book(output_format = "all", envir = new.env())
## remove temporary .Rmds
file.remove(.copyModuleRmds)
setwd(prjDir)
